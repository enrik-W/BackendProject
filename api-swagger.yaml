openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /items:
    get:
      tags:
      - item-controller
      summary: Return all items in database
      operationId: getAllItems
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - item-controller
      summary: Create a new item
      operationId: addItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        "201":
          description: Item created
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                - type: string
  /items/buy:
    post:
      tags:
      - item-controller
      summary: Create a new buy order
      operationId: addBuyOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerItemWrapper'
        required: true
      responses:
        "201":
          description: Buy order created
          content:
            '*/*':
              schema:
                type: string
  /customers/sign_up:
    post:
      tags:
      - customer-controller
      summary: Create a new customer
      operationId: addCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          description: Customer created
          content:
            '*/*':
              schema:
                type: string
  /customers/login:
    post:
      tags:
      - customer-controller
      summary: Login with an existing customer
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /orders:
    get:
      tags:
      - buy-order-controller
      summary: Return all buy orders
      operationId: getAllBuyOrders
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /orders/:{customerId}:
    get:
      tags:
      - buy-order-controller
      summary: Return all buy orders made by one customer
      operationId: getAllBuyOrdersFromCustomerId
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /items/:{id}:
    get:
      tags:
      - item-controller
      summary: Return an item by id
      operationId: getItemById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
  /customers:
    get:
      tags:
      - customer-controller
      summary: Return all customers in database
      operationId: getAllCustomers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /customers/:{id}:
    get:
      tags:
      - customer-controller
      summary: Return customer by id
      operationId: getCustomerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        password:
          type: string
    CustomerItemWrapper:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        item:
          $ref: '#/components/schemas/Item'
